!function(e){var a={};function n(t){if(a[t])return a[t].exports;var i=a[t]={i:t,l:!1,exports:{}};return e[t].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=a,n.d=function(e,a,t){n.o(e,a)||Object.defineProperty(e,a,{configurable:!1,enumerable:!0,get:t})},n.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},n.n=function(e){var a=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(a,"a",a),a},n.o=function(e,a){return Object.prototype.hasOwnProperty.call(e,a)},n.p="/dist/",n(n.s=18)}({18:function(e,a,n){"use strict";n.r(a);var t=n(4);async function i(){"undefined"==typeof Binaryen&&importScripts("../lib/binaryen.js")}async function r(){"undefined"==typeof wabt&&(self.global=self,importScripts("../lib/libwabt.js"))}async function s(e){await i();const a=Binaryen.readBinary(new Uint8Array(e));return a.optimize(),Promise.resolve(a.emitBinary())}async function o(e){await i();const a=Binaryen.readBinary(new Uint8Array(e));return Promise.resolve(a.validate())}async function m(e){await i();const a=Binaryen.readBinary(new Uint8Array(e)),n=Binaryen.print;let t="";return Binaryen.print=(e=>{t+=e+"\n"}),a.runPasses(["print-call-graph"]),Binaryen.print=n,Promise.resolve(t)}async function c(e){await i();const a=Binaryen.readBinary(new Uint8Array(e));return a.optimize(),Promise.resolve(a.emitAsmjs())}async function y(e){await i();const a=Binaryen.readBinary(new Uint8Array(e));return Promise.resolve(a.emitText())}async function l(e){await i();const a=Binaryen.parseText(e);return Promise.resolve(a.emitBinary())}async function u(e){await r();const a=wabt.readWasm(e,{readDebugNames:!0});return a.generateNames(),a.applyNames(),Promise.resolve(a.toText({foldExprs:!1,inlineExport:!0}))}async function W(e){await r();const a=wabt.parseWat("test.wat",e);return a.resolveNames(),a.validate(),Promise.resolve(a.toBinary({log:!0,write_debug_names:!0}).buffer)}onmessage=(e=>{const a={[t.a.OptimizeWasmWithBinaryen]:s,[t.a.ValidateWasmWithBinaryen]:o,[t.a.CreateWasmCallGraphWithBinaryen]:m,[t.a.ConvertWasmToAsmWithBinaryen]:c,[t.a.DisassembleWasmWithBinaryen]:y,[t.a.AssembleWatWithBinaryen]:l,[t.a.DisassembleWasmWithWabt]:u,[t.a.AssembleWatWithWabt]:W}[e.data.command];!function(e,a){if(!e)throw new Error(a)}(a,`Command ${e.data.command} not found.`),async function(e,a){const n={id:e.id,payload:null,success:!0};try{n.payload=await a(e.payload)}catch(e){n.payload={message:e.message},n.success=!1}postMessage(n,void 0)}(e.data,a)})},4:function(e,a,n){"use strict";var t;n.d(a,"a",function(){return t}),function(e){e[e.OptimizeWasmWithBinaryen=0]="OptimizeWasmWithBinaryen",e[e.ValidateWasmWithBinaryen=1]="ValidateWasmWithBinaryen",e[e.CreateWasmCallGraphWithBinaryen=2]="CreateWasmCallGraphWithBinaryen",e[e.ConvertWasmToAsmWithBinaryen=3]="ConvertWasmToAsmWithBinaryen",e[e.DisassembleWasmWithBinaryen=4]="DisassembleWasmWithBinaryen",e[e.AssembleWatWithBinaryen=5]="AssembleWatWithBinaryen",e[e.DisassembleWasmWithWabt=6]="DisassembleWasmWithWabt",e[e.AssembleWatWithWabt=7]="AssembleWatWithWabt"}(t||(t={}))}});
//# sourceMappingURL=worker.bundle.js.map